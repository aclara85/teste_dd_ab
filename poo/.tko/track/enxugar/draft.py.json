{
    "patches": [
        {
            "label": "2025-09-22_17-04-32",
            "content": "@@ -1,1550 +0,0 @@\n-class Towel: %0A    def __init__(self, color:str, size: str): #construtor%0A        self.color: str= color%0A        self.size: str = size%0A        self.wetness: int = 0%0A%0A    def dry(self, amount: int)-%3E None: %0A            self.wetness += amount%0A            if self.wetness %3E= self.getMaxWetness():%0A                print(%22Toalha encharcada%22)%0A                self.wetness = self.getMaxWetness()%0A%0A    def wringOut(self)-%3E None:%0A            self.wetness = 0%0A    %0A%0A    def getMaxWetness(self) -%3E int:%0A            if self.size == %22p%22:%0A                return 10%0A            if self .size == %22m%22:%0A                return 20       %0A            if self.size == %22g%22:%0A                return 30%0A            return 0 %0A        %0A    def __str__(self) -%3E str:%0A            return f%22Cor: %7Bself.color%7D, Tamanho:%7Bself.size%7D, Umidade:%7Bself.wetness%7D%22%0A        %0A%0Adef main():%0A   toalha = Towel(%22azul%22, %22m%22) #objeto manipulado%0A   while True:%0A        line:str = input()%0A        args:list%5Bstr%5D = line.split(%22 %22)%0A%0A        if args%5B0%5D == %22end%22:%0A            break   %0A        elif args%5B0%5D == %22criar%22:%0A             color = args%5B1%5D%0A             size = args%5B2%5D    %0A             toalha = Towel(color, size)%0A        elif args%5B0%5D == %22mostrar%22:%0A            print(toalha)%0A        %0A        elif args%5B0%5D == %22seca%22:%0A            print(%22sim%22 if toalha.dry() else %22n%C3%A3o%22)%0A        elif args%5B0%5D == %22dry%22: #amout%0A            amount:int = int(args%5B1%5D)%0A            toalha.dry(amount)%0A        else:%0A            print(%22fail: Comando inv%C3%A1lido%22)    %0A        %0A  %0Amain()%0A%0Adef main():%0A     toalha = Towel %0A     main()%0A\n",
            "lines": "0"
        },
        {
            "label": "2025-10-05_12-51-24",
            "content": "@@ -5,16 +5,17 @@\n s Towel:\n+ \n %0A    def\n@@ -19,14 +19,16 @@\n def \n+_\n _init_\n+_\n (sel\n@@ -36,17 +36,16 @@\n , color:\n- \n str, siz\n@@ -52,16 +52,28 @@\n e: str):\n+ #construtor\n %0A       \n@@ -88,17 +88,16 @@\n lor: str\n- \n = color%0A\n@@ -191,17 +191,16 @@\n int)\n- \n -%3E None:\n %0A   \n@@ -195,17 +195,22 @@\n -%3E None:\n-%0A\n+ %0A    \n         \n@@ -232,16 +232,20 @@\n  amount%0A\n+    \n         \n@@ -264,26 +264,27 @@\n ess %3E= self.\n-is\n+get\n MaxWetness()\n@@ -298,66 +298,23 @@\n     \n-   self.wetness = self.isMaxWetness()%0A\n        \n-     \n print(%22\n-t\n+T\n oalh\n@@ -332,38 +332,23 @@\n a%22)%0A\n-%0A\n     \n-def isDry(self):%0A\n+   \n         \n retu\n@@ -343,22 +343,16 @@\n         \n-return\n  self.we\n@@ -358,19 +358,37 @@\n etness =\n-= 0\n+ self.getMaxWetness()\n %0A%0A    de\n@@ -403,16 +403,23 @@\n ut(self)\n+-%3E None\n :%0A      \n@@ -412,32 +412,36 @@\n %3E None:%0A        \n+    \n self.wetness = 0\n@@ -436,24 +436,29 @@\n .wetness = 0\n+%0A    \n %0A%0A    def is\n@@ -455,18 +455,19 @@\n     def \n-is\n+get\n MaxWetne\n@@ -483,16 +483,20 @@\n -%3E int:%0A\n+    \n         \n@@ -516,12 +516,16 @@\n == %22\n-P\n+p\n %22:%0A\n+    \n     \n@@ -542,39 +542,44 @@\n turn 10%0A        \n+    \n if self\n+ \n .size == %22M%22:%0A  \n@@ -572,17 +572,17 @@\n ize == %22\n-M\n+m\n %22:%0A     \n@@ -584,24 +584,28 @@\n             \n+    \n return 20%0A  \n@@ -601,25 +601,34 @@\n eturn 20\n-%0A\n+       %0A  \n         \n if self.\n@@ -611,32 +611,34 @@\n      %0A          \n+  \n if self.size == \n@@ -642,9 +642,9 @@\n == %22\n-G\n+g\n %22:%0A \n@@ -650,24 +650,28 @@\n             \n+    \n return 30%0A  \n@@ -680,16 +680,20 @@\n     \n+    \n return 0\n %0A%0A  \n@@ -688,17 +688,26 @@\n return 0\n-%0A\n+ %0A        \n %0A    def\n@@ -711,13 +711,15 @@\n def \n+_\n _str_\n+_\n (sel\n@@ -729,16 +729,20 @@\n -%3E str:%0A\n+    \n         \n@@ -777,17 +777,16 @@\n Tamanho:\n- \n %7Bself.si\n@@ -798,17 +798,16 @@\n Umidade:\n- \n %7Bself.we\n@@ -814,16 +814,24 @@\n tness%7D%22%0A\n+        \n %0A%0Adef ma\n@@ -843,21 +843,14 @@\n %0A   \n- \n to\n-wel: Towel\n+alha\n  = T\n@@ -859,16 +859,39 @@\n el(%22\n+azul\n %22, %22\n+m\n %22)\n-%0A\n  \n+#objeto manipulado%0A\n    w\n@@ -901,17 +901,16 @@\n e True:%0A\n-%0A\n         \n@@ -914,17 +914,16 @@\n    line:\n- \n str = in\n@@ -932,34 +932,8 @@\n t()%0A\n-        print(%22$%22 + line)%0A\n     \n@@ -941,17 +941,16 @@\n    args:\n- \n list%5Bstr\n@@ -1016,16 +1016,19 @@\n    break\n+   \n %0A       \n@@ -1065,26 +1065,22 @@\n         \n+ \n color\n-: str\n  = args%5B\n@@ -1094,25 +1094,21 @@\n         \n+ \n size\n-: str\n  = args%5B\n@@ -1109,17 +1109,22 @@\n  args%5B2%5D\n-%0A\n+    %0A \n         \n@@ -1129,19 +1129,20 @@\n       to\n-wel\n+alha\n  = Towel\n@@ -1184,12 +1184,15 @@\n == %22\n-seca\n+mostrar\n %22:%0A \n@@ -1212,42 +1212,24 @@\n int(\n-%22sim%22 if towel.isDry() else %22nao%22)\n+toalha)%0A        \n %0A   \n@@ -1254,14 +1254,12 @@\n == %22\n-torcer\n+seca\n %22:%0A \n@@ -1273,23 +1273,46 @@\n     \n-towel.wringOut(\n+print(%22sim%22 if toalha.dry() else %22n%C3%A3o%22\n )%0A  \n@@ -1338,17 +1338,20 @@\n == %22\n-enxugar%22:\n+dry%22: #amout\n %0A   \n@@ -1366,17 +1366,16 @@\n  amount:\n- \n int = in\n@@ -1399,19 +1399,20 @@\n       to\n-wel\n+alha\n .dry(amo\n@@ -1430,71 +1430,59 @@\n   el\n-if args%5B0%5D == %22mostrar%22:%0A            print(towel)%0A        else:\n+se:%0A            print(%22fail: Comando inv%C3%A1lido%22)    \n %0A   \n@@ -1490,54 +1490,61 @@\n     \n-    print(%22fail: comando n%C3%A3o encontrado%22)%0A%0A%0A\n+%0A  %0Amain()%0A%0Adef main():%0A     toalha = Towel %0A     \n main()\n+%0A\n",
            "lines": "58"
        },
        {
            "label": "2025-10-05_12-54-49",
            "content": "@@ -18,16 +18,14 @@\n def \n-_\n _init_\n-_\n (sel\n@@ -673,15 +673,13 @@\n def \n-_\n _str_\n-_\n (sel\n",
            "lines": "59"
        },
        {
            "label": "2025-10-05_12-58-10",
            "content": "class Towel:\n    def __init__(self, color: str, size: str):\n        self.color: str = color\n        self.size: str = size\n        self.wetness: int = 0\n\n    def dry(self, amount: int) -> None:\n        self.wetness += amount\n        if self.wetness >= self.isMaxWetness():\n            self.wetness = self.isMaxWetness()\n            print(\"toalha encharcada\")\n\n    def isDry(self):\n        return self.wetness == 0\n\n    def wringOut(self):\n        self.wetness = 0\n\n    def isMaxWetness(self) -> int:\n        if self.size == \"P\":\n            return 10\n        if self.size == \"M\":\n            return 20\n        if self.size == \"G\":\n            return 30\n        return 0\n\n    def __str__(self) -> str:\n        return f\"Cor: {self.color}, Tamanho: {self.size}, Umidade: {self.wetness}\"\n\n\ndef main():\n    towel: Towel = Towel(\"\", \"\")\n    while True:\n\n        line: str = input()\n        print(\"$\" + line)\n        args: list[str] = line.split(\" \")\n\n        if args[0] == \"end\":\n            break\n        elif args[0] == \"criar\":\n            color: str = args[1]\n            size: str = args[2]\n            towel = Towel(color, size)\n        elif args[0] == \"seca\":\n            print(\"sim\" if towel.isDry() else \"nao\")\n        elif args[0] == \"torcer\":\n            towel.wringOut()\n        elif args[0] == \"enxugar\":\n            amount: int = int(args[1])\n            towel.dry(amount)\n        elif args[0] == \"mostrar\":\n            print(towel)\n        else:\n            print(\"fail: comando n\u00e3o encontrado\")\n\n\nmain()",
            "lines": "59"
        }
    ]
}